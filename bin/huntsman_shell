#!/usr/bin/env python3
import os
import time

from cmd import Cmd

from astropy.utils import console

from panoptes.pocs.core import POCS
from panoptes.utils import error
from panoptes.utils import listify

from huntsman.observatory import HuntsmanObservatory as Observatory


class HuntsmanShell(Cmd):
    """ A simple command loop for running the Huntsman via POCS """
    intro = 'Welcome to Huntsman Shell! Type ? for help'
    prompt = 'Huntsman > '
    procs = dict()
    pocs = None

    _running = False

    msg_subscriber = None
    msg_publisher = None
    cmd_publisher = None

    @property
    def ready(self):
        if self.pocs is None:
            print_warning('POCS has not been setup. Please run `setup_pocs`')
            return False

        if self.pocs.observatory.mount.is_parked:
            print_warning('Mount is parked. To unpark run `unpark`')
            return False

        return self.pocs.is_safe()

    def do_setup_pocs(self, *arg):
        """ Setup and initialize a POCS instance """
        simulator = listify(arg[0].split('=')[-1])

        if simulator is None:
            simulator = []

        try:
            observatory = Observatory(simulator=simulator)

            self.pocs = POCS(observatory,
                             state_machine_file='{}/conf_files/state_machine.yaml'.format(os.getenv('HUNTSMAN_POCS')))
            self.pocs.initialize()
        except error.PanError:
            pass

    def do_reset_pocs(self, *arg):
        self.pocs = None

    def do_run_pocs(self, *arg):
        """ Make POCS `run` in a separate process

        Note:
            Run with `--simulator=all` for simulator

        Arguments:
            *arg {str} -- Can pass arguments through to `do_connect`
        """
        if self.pocs is not None:
            print_info("Starting POCS - Press Ctrl-c to interrupt")

            try:
                self.pocs.run()
            except KeyboardInterrupt:
                print_warning('POCS interrupted, skipping states and parking')
                self.pocs.observatory.mount.home_and_park()
                self._running = False
        else:
            print_warning('Please run `setup_pocs` before trying to run')

    def do_exit(self, *arg):
        """ Exits PanShell """
        if self.pocs is not None:
            self.do_power_down()

        print_info("Bye! Thanks!")
        return True

    def emptyline(self):
        pass

    def do_unpark(self, *arg):
        try:
            self.pocs.observatory.mount.unpark()
            self.pocs.say("Unparking mount")
        except Exception as e:
            print_warning('Problem unparking: {}'.format(e))

    def do_park(self, *arg):
        try:
            self.pocs.observatory.mount.park()
            self.pocs.say("Mount parked")
        except Exception as e:
            print_warning('Problem unparking: {}'.format(e))

    def do_go_home(self, *arg):
        """ Move the mount to home """
        if self.ready is False:
            if self.pocs.is_weather_safe() is False:
                self.do_power_down()

            return

        try:
            self.pocs.observatory.mount.slew_to_home()
        except Exception as e:
            print_warning('Problem slewing to home: {}'.format(e))

    def do_power_down(self, *arg):
        print_info("Shutting down POCS instance, please wait")
        self.pocs.power_down()

        while self.pocs.observatory.mount.is_parked is False:
            print_info('.')
            time.sleep(5)

        self.pocs = None


##########################################################################
# Private Methods
##########################################################################

##########################################################################
# Utility Methods
##########################################################################


def print_info(msg):
    console.color_print(msg, 'lightgreen')


def print_warning(msg):
    console.color_print(msg, 'yellow')


def print_error(msg):
    console.color_print(msg, 'red')


def parse_options(opts):
    args = []
    kwargs = {}

    for opt in opts.split(' '):
        if '=' not in opt:
            args.append(opt)
        else:
            name, value = opt.split('=')
            name = name.replace('--', '')
            if name in kwargs:
                kwargs[name] = listify(kwargs[name])
                kwargs[name].append(value)
            else:
                kwargs[name] = value

    return args, kwargs


if __name__ == '__main__':
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    HuntsmanShell().cmdloop()
